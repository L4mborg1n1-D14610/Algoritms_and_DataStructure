from collections import deque


# 1) ввиду того, что у каждой операции есть обратная, то для каждой последовательности операций получения из 0 х
# существует эквивалентная ей последовательность операций той же длины получения из х 0 (только деление на два вместо
# умножения, но делить можно только чётные числа)
# 2) рассматривать числа будем в двоичной СС. деление на 2 в двоичной СС есть побитовый сдвиг вправо на единицу (убираем
# последний ноль)
# 3) всегда будем делить на 2, когда есть возможность (это оптимально)
# 4) когда число заканчивается на единицу, будем вычитать и прибавлять единицу в исходя из того, какая операция
# "уничтожит" наибольшее количество единиц. Если число единиц равны, то отдадим предпочтение тому числу, которое имеет
# в двоичной записи наибольшее число нулей. Но ввиду того, что при изменении числа на единицу, изменяется лишь
# последний блок из единиц (полностью или только лишь последняя едиица, то предпочтение всегда будет отдаваться
# тому числу, что на конце имеет наибольшее число нулей. Ещё проще: если число заканчивается на 01, вычитаем единицу,
# иначе - прибавляем. Из любого нечётного числа можно получить число, кратное четырём, изменив его на единицу - это и
# будет оптимальным изменением => будем смотреть остатки от деления на 4

def get_optimal(value: int):
    # деление: 0 (умножение)
    # вычитание: 1 (сложение)
    # сложение: 2 (вычитание)
    deq = deque()
    while value > 0:
        if (value % 2) == 0:
            value /= 2
            value = int(value)
            deq.append(0)
        elif value == 3:  # выгоднее вычитать, хотя и заканчивается не на 01
            deq.append(1)
            value -= 1
        else:
            value -= 1
            if (value % 4) == 0:
                deq.append(1)
            else:
                value += 2
                deq.append(2)
    return deq


operations = get_optimal(int(input()))
while operations:
    el = operations.pop()
    if el == 0:
        print("dbl")
    elif el == 1:
        print("inc")
    else:
        print("dec")
